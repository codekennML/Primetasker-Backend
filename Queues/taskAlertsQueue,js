// const stopword = require("stopword");
const Queue = require("bull");
const language = require("@google-cloud/language");

// const Alert = require("../model/Alerts");
// const User = require("../model/User");

const keywordMatchQueue = new Queue("taskAlert", {
  redis: {
    host: "127.0.0.1",
    port: 6379,
  },
});

// const tokenizer = new natural.WordTokenizer();
// const stemmer = natural.PorterStemmer;

// async function generateTopics(text) {
//  // Tokenize and stem the text
// const tokenizedText = tokenizer.tokenize(text);
// const stemmedText = tokenizedText.map(token => stemmer.stem(token));

// // Remove stopwords
// const stopwords = natural.stopwords;
// const filteredText = stemmedText.filter(token => !stopwords.includes(token));

// // Create a term frequency matrix
// const TfIdf = natural.TfIdf;
// const tfidf = new TfIdf();
// tfidf.addDocument(filteredText);
// const termFrequencyMatrix = [];
// while (tfidf.next()) {
//   const doc = tfidf.getDocument();
//   const terms = doc.terms;
//   const frequencies = [];
//   for (let i = 0; i < terms.length; i++) {
//     frequencies.push(doc.getTermFrequency(terms[i]));
//   }
//   termFrequencyMatrix.push(frequencies);
// }

// // Perform LDA with 5 topics

// const lda = new natural.LDA();
// const numberOfTopics = 5;
// lda.train(termFrequencyMatrix, numberOfTopics);

// // Get the top 8 words for each topic
// const topicWords = [];
// for (let i = 0; i < numberOfTopics; i++) {
//   const topWords = lda.getTopicTerms(i, 8);
//   topicWords.push(topWords.map(word => word.term));
// }

// // Print the topics
// console.log('Topics:');
// topicWords.forEach((words, i) => {
//   console.log(`Topic ${i + 1}: ${words.join(', ')}`);
// });
// }

const client = new language.LanguageServiceClient();

async function keywordMatch(job) {
  const { text } = job.data;

  console.log(text);

  const document = {
    content: text,
    type: "PLAIN_TEXT",
  };

  const [result] = await client.analyzeEntities({ document });

  const entities = result.entities;

  console.log("Entities:", entities);
  // console.log(text);

  //   const topics = generateTopics(text);

  //   console.log(topics);

  // Preprocess the text data of the post
  // const preprocessedText = tokenizer
  //   .tokenize(text.toLowerCase())
  //   .filter((word) => !stopWords.includes(word))
  //   .map((word) => stemmer.stem(word))
  //   .join(" ");

  // console.log(preprocessedText);

  //   Find all user alerts that match the preprocessed text
  //   const userAlerts = await Alert.find({
  //     text: { $in: preprocessedText.split(" ") },
}

//   // Notify users of relevant posts
//   //   for (const userAlert of userAlerts) {
//   //     console.log(`User ${userAlert.userId}, your alert for the following keywords has been matched: ${userAlert.keywords.join(', ')}`);
//   //   }

//   // Update the post in the database to mark it as processed
//   //   await Post.updateOne({ _id: postId }, { processed: true });
// }

keywordMatchQueue.process(keywordMatch);

module.exports = keywordMatchQueue;
